@using System.Globalization
@inject IDialogService _dialogService;
@inject ITransactionService _transactionService;


@if (Transactions != null)
{
    <MudTable Items="@Transactions" Hover="true" SortLabel="Sort By" Filter="new Func<Transaction,bool>(FilterFunc)" Dense="@Detailed" Elevation="0" @bind-SelectedItem="_selectedItem">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@Header</MudText>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Transaction, object>(x => x.Date)">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.Description)">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.Amount)">Amount</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Transaction, object>(x => x.Label)">Label</MudTableSortLabel></MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">
                @context.Date.ToString("dd.MM.yyyy")
            </MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Amount">@context.Amount</MudTd>
            <MudTd DataLabel="Label">
                @if (context.Label != null)
                {@*Split label list by comma*@
                    @foreach (var label in context.Label.Split(","))
                    {
                        <MudChip Color='Color.Info'>@label</MudChip>
                    }
                }
            </MudTd>
            <MudTd DataLabel="Action">
                <button class="btn btn-info" @onclick="() => Edit(context)">edit</button>
                <button class="btn btn-danger" @onclick="() => Delete(context)">delete</button>
            </MudTd>
        </RowTemplate>
        
        <PagerContent>
            <MudTablePager PageSizeOptions="new[] {25, 50}"/>
        </PagerContent>

    </MudTable>
    
}
else
{
    <MudTable Items="@(_loadingData)">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Amount</MudTh>
            <MudTh>Label</MudTh>
            <MudTh>Action</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudSkeleton Animation="Animation.Wave" /></MudTd>
            <MudTd><MudSkeleton Animation="Animation.Wave" /></MudTd>
            <MudTd><MudSkeleton Animation="Animation.Wave" /></MudTd>
            <MudTd><MudSkeleton Animation="Animation.Wave" /></MudTd>
            <MudTd><MudSkeleton Animation="Animation.Wave" /></MudTd>
        </RowTemplate>
    </MudTable>
}


@code {

    private List<Transaction> Transactions { get; set; }

    [Parameter] 
    public int ItemCount { get; set; }

    [Parameter]
    public string Header { get; set; } = "Transactions";

    [Parameter]
    public bool Detailed { get; set; }
    
    [Parameter]
    public DateRange DateRange { get; set; }

    [Parameter]
    public bool ShowAllTransactions { get; set; } = true;

    //the string from the searchbar
    private string _searchString = "";
    
    //selected item in List
    private Transaction _selectedItem = null;
    
    //placeholder for async loading Data
    private List<string> _loadingData = new(){ "", "", "", "", "", "",""};


    /// <summary>
    /// OnInitializedAsync is invoked when the component is initialized after having received its initial parameters.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        //get the loaded transaction list from the TransactionService
        Transactions = await _transactionService.GetTransactionList();

        _transactionService.TransactionHasChanged += StateHasChanged;

        //if the component is asked to deliver a limited item amount the last x items are taken from the global list
        //ItemCount = ItemCount > Transactions.Count ? Transactions.Count : ItemCount;

        //return only the requested number of elements
        //Transactions = Transactions.Take(ItemCount).ToList();
    }
    

    /// <summary>
    /// Updates the SearchString in realtime - @oninput event.
    /// </summary>
    /// <param name="e">The ChangeEventArgs from event call</param>
    private void UpdateSearchString(ChangeEventArgs e) => _searchString = e.Value?.ToString();

    
    /// <summary>
    /// The filter function that filters the Transaction. Each Transaction is check one at a time.
    /// </summary>
    /// <param name="t">the transaction to be checked if filter apply</param>
    /// <returns>when Transaction contains searchSting</returns>
    private bool FilterFunc(Transaction t)
    {
        return MatchSearchString() && MatchDateRange();

        //Check for Match with Search String
        bool MatchSearchString()
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if (t.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (t.Label.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{t.Amount} {t.Date}".Contains(_searchString))
                return true;
            return false;
        }

        //Check if Item is in Range of Dates
        bool MatchDateRange()
        {
            if (ShowAllTransactions || DateRange != null && t.Date >= DateRange.Start && t.Date <= DateRange.End)
                return true;
            return false;
        }

    }


    /// <summary>
    /// Handles the editing of a transaction. Opens an edit dialog and awaits the result
    /// </summary>
    /// <param name="transaction">The Transaction to be edited</param>
    private void Edit(Transaction transaction)
    {

        var dp = new DialogParameters {{nameof(TransactionEditDialog.Transaction), transaction}};
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true};
        _dialogService.Show<TransactionEditDialog>($"Edit Transaction", dp, options);
    }
    
    
    /// <summary>
    /// Handles the removal of a transaction from transaction list.
    /// </summary>
    /// <param name="transaction">The Transaction to be deleted</param>
    private void Delete(Transaction transaction)
    {
        _transactionService.DeleteTransaction(transaction);
    }

}
