@page "/"
@using Microsoft.Extensions.Logging
@inject HttpClient _http
@inject ITransactionService _transactionService;
@inject ILogger<Index> _logger;
@inject IJSRuntime _js;

<MudGrid>
    <MudItem xs="12" sm="6" md="4" lg="3">
        <div class="basic-card budget-card">
            <h2>Current Budget</h2>
            <p class="budget-trend">@(_transactionService.GetBalanceOfLast30Days() > 0 ? "+" : "")@_transactionService.GetBalanceOfLast30Days()$ last 30 days</p>
            <Animate Animation="Animations.FlipUp" Duration="TimeSpan.FromSeconds(1)">
                <p class="budget-amount">@_transactionService.GetCurrentBalance() $</p>
            </Animate>
        </div>
    </MudItem>
    
    <MudItem xs="12" sm="6" md="4" lg="3">
        <div class="basic-card expense-income-card">
            <h2>Expenses & Income</h2>
        
            <p class="budget-income">Income last 30 days: @_transactionService.GetIncomeLast30Days()$</p>
            <p class="budget-income">Expenses last 30 days: @_transactionService.GetExpensesLast30Days()$</p>
        
            <div class="chartWrapper">
                <PieChart Labels="@(new[] {"Total Income", "Total Expenses"})"
                          Income="@_transactionService.GetTotalIncome()"
                          Expense="@_transactionService.GetTotalExpense()">
                </PieChart>
                        
            </div>
        </div>
    </MudItem>
    
    <MudItem xs="12" md="4" lg="6">
        <div class="basic-card">
            <TransactionForm
                Transaction="_newTransaction" ButtonText="Add" OnValidSubmitCallback="HandleValidSubmit">
            </TransactionForm>
        </div>
    </MudItem>
    
</MudGrid>

<MudGrid>
    <MudItem xs="12">
        <div class="basic-card">
            <TransactionTable Header="Last 10 Transactions" ItemCount="10"></TransactionTable>
        </div>
    </MudItem>
</MudGrid>

@code
{
    private Transaction _newTransaction = new();

    /// <summary>
    /// OnInitializedAsync is invoked when the component is initialized after having received its initial parameters.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        //Event callback when a Transaction is updated
        _transactionService.TransactionHasChanged += StateHasChanged;
        //Load the Transaction list from localhost
        await _transactionService.GetTransactionList();
    }

    /// <summary>
    ///This function is invoked when the TransactionForm was validly submitted.
    /// </summary>
    private void HandleValidSubmit()
    {
        //Calls the TransactionService to add a new Transaction
        _transactionService.AddTransaction(_newTransaction);
        
        //Set the object of the InputForm to a new instance
        _newTransaction = new Transaction();
    }

}
