@using System.IO
@using System.Text
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject ITransactionService _transactionService;
@inject HttpClient Http;

<style>
    .drag-drop-zone {
        display: flex; align-items:center; justify-content:center; transition:all .4s; min-height:400px;
    }
    .drag-drop-input {
        position: absolute; width:100%; height:75%; opacity:0; cursor:pointer; margin: 2rem;
        z-index:2;
    }
    .drag-enter {
        box-shadow: var(--mud-elevation-10);
    }
    .list{
        padding:2em;min-width:100%;
    }
</style>

<MudPaper @ondragenter="@(()=>_dragEnterStyle="drag-enter")"
          @ondragleave="@(()=>_dragEnterStyle=null)"
          @ondragend="@(()=>_dragEnterStyle=null)"
          Class=@("drag-drop-zone "+ _dragEnterStyle)>

    <InputFile OnChange="OnInputFileChanged" class="drag-drop-input" accept="application/json"/>

    @if (fileNames.Count == 0)
    {
        <MudText Typo="Typo.h5" Style="padding:2em;">Drag and drop TransactionData.json here or click</MudText>
    }
    else
    {
        <MudList Style="padding:2em;width:100%;" Dense="true" >
            @foreach (var file in fileNames)
            {
                <MudListItem @key="@file">
                   <MudChip Color="Color.Dark" Style="width:60px; overflow:hidden;" Text="@(file.Split(".").Last())" />
                   @file
                </MudListItem>
            }
        </MudList>
    }
</MudPaper>

<MudGrid Justify="Justify.Center" Spacing="4" Style="padding: 1rem">
    <MudItem>
        <MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
    </MudItem>
    <MudItem>
        <MudButton OnClick="@fileNames.Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudItem>
</MudGrid>


@code { 
    
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    
    string _dragEnterStyle;
    IList<string> fileNames = new List<string>();
    private IBrowserFile DataFile { get; set; }
    

    void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        fileNames = files.Select(f => f.Name).ToList();
        DataFile = files.FirstOrDefault();

    }

    private async Task Upload()
    {

        Stream stream = DataFile.OpenReadStream();
        using var reader = new StreamReader(stream);
        string json = await reader.ReadToEndAsync();
        stream.Close();
      
        
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        try
        {
            var tl = JsonConvert.DeserializeObject<List<Transaction>>(json);
            _transactionService.SetTransactionList(tl);
            _transactionService.OnTransactionHasChanged();
            Snackbar.Add("TransactionData uploaded!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        catch (Exception e)
        {
            Snackbar.Add("TransactionData is invalid - please check the file.", Severity.Error);
            Console.WriteLine(e.Message);
        }

    }
}