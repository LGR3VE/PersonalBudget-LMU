@page "/transaction"
@inject ITransactionService _transactionService;


<h1>All transactions</h1>

<div class="basic-card">
    <MudText Typo="Typo.h6">Select date range</MudText>
    <MudGrid Class="mud-grid-align-items-xs-flex-end">
        <MudItem xs="12" sm="6">
            <MudDateRangePicker Label="Select start and end date" @bind-DateRange="DateRange" Disabled="ShowAllTransactions" @onchange="UpdateChart"/>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudSwitch Color="Color.Primary" @bind-Checked=@ShowAllTransactions Label="Show all transactions"/>
        </MudItem>
        <MudItem xs="6" sm="3">
            <MudSwitch Color="Color.Primary" @bind-Checked=@ShowGraphs Label="Show graphs"/>
        </MudItem>
    </MudGrid>
</div>


@if (ShowGraphs)
{
    @if (_chartBudgetHistoryData != null && _xAxisLabels != null)
    {
        <MudGrid>
            <MudItem xs="12" sm="6">
                <div class="basic-card">
                    @if (_chartBudgetHistoryData != null)
                    {
                        <LineHistoryChart Labels="@_xAxisLabels" Data="@_chartBudgetHistoryData"></LineHistoryChart>
                    }
                    else
                    {
                        <MudSkeleton Animation="Animation.Wave" />
                        <MudSkeleton Animation="Animation.Wave" />
                        <MudSkeleton Animation="Animation.Wave" />
                        <MudSkeleton Animation="Animation.Wave" />
                    }
                </div>
            </MudItem>
            <MudItem xs="12" sm="6">
                <div class="basic-card">
                    @if (_chartExpenseData != null)
                    {
                        <BarChangeChart Labels="@_xAxisLabels" IncomeData="@_chartIncomeData" ExpenseData="@_chartExpenseData"></BarChangeChart>
                    }
                    else
                    {
                        <MudSkeleton Animation="Animation.Wave" />
                        <MudSkeleton Animation="Animation.Wave" />
                        <MudSkeleton Animation="Animation.Wave" />
                        <MudSkeleton Animation="Animation.Wave" />
                    }
                </div>
            </MudItem>
        </MudGrid>
        
    }

}

<div class="basic-card">
    <TransactionTable Detailed="true" Header="All transactions" DateRange="@DateRange" ShowAllTransactions="@ShowAllTransactions"></TransactionTable>
</div>


@code {

    //Reference to ITransactionService List
    private List<Transaction> _transactions;
    
    //Date rage to transactions to be displayed
    private DateRange _dateRange { get ; set; } = new(DateTime.Now.Subtract(TimeSpan.FromDays(60)), DateTime.Now.Date);
    
    //Date rage helper property for GUID
    private DateRange DateRange
    {
        get => _dateRange;
        set
        {
            //update DateRange when Daterage Picker is updated and update Graph Data
            _dateRange = value;
            UpdateChart();
        }
    }
    
    //property for displaying all transactions
    private bool _showAllTransactions { get; set; } = true;

    //Date rage helper property for GUID
    private bool ShowAllTransactions
    {
        get => _showAllTransactions;
        set
        {
            //update DateRange when Daterage Picker is updated and update Graph Data
            _showAllTransactions = value;
            //set Start of Daterange
            DateRange.Start = value ? _transactions.OrderBy(t => t.Date).FirstOrDefault()?.Date : DateTime.Now.Subtract(TimeSpan.FromDays(30));
            UpdateChart();
        }
    }
    
    private bool ShowGraphs { get; set; } = true;

    //Charts properties
    private Dictionary<DateTime, decimal> BudgetHistory { get; set; } = new();
    private Dictionary<DateTime, decimal> IncomeHistory { get; set; } = new();
    private Dictionary<DateTime, decimal> ExpenseHistory { get; set; } = new();

    //Chart labels
    private string[] _xAxisLabels = {};
    
    //Chart Data
    private decimal[] _chartBudgetHistoryData = {};
    private decimal[] _chartIncomeData = {};
    private decimal[] _chartExpenseData = {};

    /// <summary>
    /// OnInitializedAsync is invoked when the component is initialized after having received its initial parameters.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        //get the loaded transaction list from the TransactionService
        _transactions = await _transactionService.GetTransactionList();
        
        //Event callback when a Transaction is updated to rerender UI
        _transactionService.TransactionHasChanged += StateHasChanged;
        _transactionService.TransactionHasChanged += UpdateChart;
        UpdateChart();
    }

    
    /// <summary>
    /// Setup Data for BudgetHistory Chart
    /// </summary>
    private void SetupBudgetHistoryChart()
    {
        if (DateRange.Start != null && DateRange.End != null)
        {
            BudgetHistory = new Dictionary<DateTime, decimal>();
            BudgetHistory.Clear();

            //Sum of all transactions: 1. Prior to Startdate
            var startSum = _transactions
                .Where(t => t.Date < DateRange.Start.GetValueOrDefault())
                .Sum(t => t.Amount);

            //First Value to be added
            BudgetHistory.Add(DateRange.Start.GetValueOrDefault() - TimeSpan.FromDays(1), startSum);


            //calculate the sum for each day of the remaining days
            var groupedTransactions = _transactions
                //Transactions that are in between the DateRange
                .Where(t => t.Date >= DateRange.Start.GetValueOrDefault() && t.Date <= DateRange.End.GetValueOrDefault())
                //Grouped by day
                .GroupBy(t => t.Date)
                .ToDictionary(g => g.Key,
                    g => startSum += g.Sum(t => t.Amount));

            //Add new datapairs to BudgetHistory Dict
            foreach (var (key, value) in groupedTransactions)
            {
                BudgetHistory.Add(key, value);
            }
        }

        //phrase Keys from Directory into StringArray for Labels
        _xAxisLabels = BudgetHistory.Keys.Select(key => key.ToString("dd MMM yyyy")).ToArray();

        //phrase Vales from Directory into doubleArray for Data
        _chartBudgetHistoryData = BudgetHistory.Values.ToArray();

    }

    /// <summary>
    /// Setup Data for Income & Expenses Chart
    /// </summary>
    private void SetupIncomeExpenseChart()
    {
        if (DateRange.Start != null && DateRange.End != null)
        {

            //calculate the sum for each day of the remaining days (income)
            IncomeHistory = new List<Transaction>(_transactions)
            .Where(t => t.Date >= DateRange.Start.GetValueOrDefault() && t.Date <= DateRange.End.GetValueOrDefault())
            .Select(t =>
            {
                if (t.Amount > 0)
                {
                    return t;
                }
                return new Transaction()
                {
                    Amount = 0,
                    Date = t.Date
                };
            })
            .GroupBy(t => t.Date)
            .ToDictionary(g => g.Key,
            g => g.Sum(t => t.Amount));

            //calculate the sum for each day of the remaining days (expenses)
            ExpenseHistory = new List<Transaction>(_transactions)
                .Where(t => t.Date >= DateRange.Start.GetValueOrDefault() && t.Date <= DateRange.End.GetValueOrDefault())
                .Select(t =>
                {
                    if (t.Amount < 0)
                    {
                        return t;
                    }
                    return new Transaction()
                    {
                        Amount = 0,
                        Date = t.Date
                    };
                })
                .GroupBy(t => t.Date)
                .ToDictionary(g => g.Key,
                g => g.Sum(t => t.Amount));


        }
        //phrase Vales from Directory into doubleArray for Data
        _chartIncomeData = IncomeHistory.Values.ToArray();
        _chartExpenseData = ExpenseHistory.Values.ToArray();

    }

    /// <summary>
    /// Updates the Charts when Transactions are changed
    /// Called when "TransactionHasChanged"
    /// </summary>
    private void UpdateChart()
    {
        //Reset old Data
        _chartBudgetHistoryData = new decimal[]{};
        _chartIncomeData = new decimal[]{};
        _chartExpenseData = new decimal[]{};
        
        //Start Setup again with new values
        SetupBudgetHistoryChart();
        SetupIncomeExpenseChart();
        Console.WriteLine("update");
        StateHasChanged();
    }

}
